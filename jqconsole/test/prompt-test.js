// Generated by CoffeeScript 1.3.3
(function() {
  var jqconsole, keyDown, type, typeA, _ref, _ref1;

  _ref = jqconsoleSetup(), jqconsole = _ref.jqconsole, (_ref1 = _ref.typer, typeA = _ref1.typeA, keyDown = _ref1.keyDown, type = _ref1.type);

  describe('Prompt Interaction', function() {
    describe('#Prompt', function() {
      after(function() {
        return jqconsole.AbortPrompt();
      });
      return it('inits prompt and auto-focuses', function() {
        var counter, resultCb;
        counter = 0;
        jqconsole.$input_source.focus(function() {
          return counter++;
        });
        resultCb = function() {};
        jqconsole.Prompt(true, resultCb);
        equal(jqconsole.GetState(), 'prompt');
        ok(counter);
        ok(jqconsole.history_active);
        strictEqual(jqconsole.input_callback, resultCb);
        return equal(jqconsole.$prompt.text().trim(), 'prompt_label');
      });
    });
    describe('#AbortPrompt', function() {
      it('aborts the prompt', function() {
        jqconsole.Prompt(true, function() {});
        jqconsole.AbortPrompt();
        return equal(jqconsole.$prompt.text().trim(), '');
      });
      return it('restarts queued prompts', function() {
        var aCb, bCb;
        aCb = function() {};
        jqconsole.Prompt(false, aCb);
        bCb = function() {};
        jqconsole.Prompt(true, bCb);
        strictEqual(jqconsole.input_callback, aCb);
        strictEqual(jqconsole.history_active, false);
        jqconsole.AbortPrompt();
        strictEqual(jqconsole.input_callback, bCb);
        strictEqual(jqconsole.history_active, true);
        return jqconsole.AbortPrompt();
      });
    });
    describe('Typing', function() {
      beforeEach(function() {
        return jqconsole.Prompt(true, function() {});
      });
      afterEach(function() {
        return jqconsole.AbortPrompt();
      });
      return it('handles chars', function() {
        var str, test;
        str = '';
        test = function(ch) {
          var e;
          str += ch;
          e = $.Event('keypress');
          e.which = ch.charCodeAt(0);
          jqconsole.$input_source.trigger(e);
          return equal(jqconsole.$prompt.text().trim(), 'prompt_label' + str);
        };
        test('a');
        test('Z');
        test('$');
        return test('Æ’');
      });
    });
    describe('#GetPromptText', function() {
      beforeEach(function() {
        return jqconsole.Prompt(true, function() {});
      });
      afterEach(function() {
        return jqconsole.AbortPrompt();
      });
      it('gets the current prompt text', function() {
        type('foo');
        equal(jqconsole.$prompt.text().trim(), 'prompt_labelfoo');
        return equal(jqconsole.GetPromptText(), 'foo');
      });
      return it('gets the current prompt text with the label', function() {
        type('foo');
        equal(jqconsole.$prompt.text().trim(), 'prompt_labelfoo');
        return equal(jqconsole.GetPromptText(true), 'prompt_labelfoo');
      });
    });
    describe('#ClearPromptText', function() {
      beforeEach(function() {
        return jqconsole.Prompt(true, function() {});
      });
      afterEach(function() {
        return jqconsole.AbortPrompt();
      });
      it('Clears the current prompt text', function() {
        type('foo');
        equal(jqconsole.GetPromptText(), 'foo');
        jqconsole.ClearPromptText();
        return equal(jqconsole.GetPromptText(), '');
      });
      return it('Clears prompt text with label', function() {
        type('foo');
        equal(jqconsole.GetPromptText(), 'foo');
        jqconsole.ClearPromptText(true);
        return equal(jqconsole.GetPromptText(true), '');
      });
    });
    describe('#SetPromptText', function() {
      beforeEach(function() {
        return jqconsole.Prompt(true, function() {});
      });
      afterEach(function() {
        return jqconsole.AbortPrompt();
      });
      return it('sets the current prompt text', function() {
        type('bar');
        jqconsole.SetPromptText('foo');
        return equal(jqconsole.GetPromptText(), 'foo');
      });
    });
    describe('Control Keys', function() {
      beforeEach(function() {
        return jqconsole.Prompt(true, function() {});
      });
      afterEach(function() {
        return jqconsole.AbortPrompt();
      });
      it('handles enter', function() {
        var counter;
        jqconsole.AbortPrompt();
        counter = 0;
        jqconsole.Prompt(true, function() {
          return counter++;
        });
        typeA();
        keyDown(13);
        ok(counter);
        equal(jqconsole.$console.find('.jqconsole-old-prompt').last().text().trim(), 'prompt_labela');
        return jqconsole.Prompt(true, function() {});
      });
      it('handles shift+enter', function() {
        keyDown(13, {
          shiftKey: true
        });
        return equal(jqconsole.$prompt.text().trim(), 'prompt_label \nprompt_continue');
      });
      it('handles tab', function() {
        typeA();
        keyDown(9);
        return equal(jqconsole.$prompt.text().trim(), 'prompt_label  a');
      });
      it('handles shift+tab', function() {
        typeA();
        keyDown(9, {
          shiftKey: true
        });
        return equal(jqconsole.$prompt.text().trim(), 'prompt_labela');
      });
      it('backspace', function() {
        typeA();
        keyDown(8);
        return equal(jqconsole.$prompt.text().trim(), 'prompt_label');
      });
      return it('cntrl+backspace', function() {
        typeA();
        typeA();
        keyDown(8, {
          metaKey: true
        });
        return equal(jqconsole.$prompt.text().trim(), 'prompt_label');
      });
    });
    return describe('Moving', function() {
      beforeEach(function() {
        return jqconsole.Prompt(true, function() {});
      });
      afterEach(function() {
        return jqconsole.AbortPrompt();
      });
      it('moves to the left', function() {
        type('xyz');
        keyDown(37);
        equal(jqconsole.$prompt_left.text().trim(), 'xy');
        keyDown(37);
        equal(jqconsole.$prompt_left.text().trim(), 'x');
        keyDown(37);
        equal(jqconsole.$prompt_left.text().trim(), '');
        keyDown(37);
        return equal(jqconsole.$prompt_left.text().trim(), '');
      });
      it('moves to the right', function() {
        type('xyz');
        keyDown(37);
        keyDown(37);
        equal(jqconsole.$prompt_left.text().trim(), 'x');
        keyDown(39);
        equal(jqconsole.$prompt_left.text().trim(), 'xy');
        keyDown(39);
        equal(jqconsole.$prompt_left.text().trim(), 'xyz');
        keyDown(39);
        return equal(jqconsole.$prompt_left.text().trim(), 'xyz');
      });
      it('moves to the prev line when at the first char of the line moving left', function() {
        type('xyz');
        keyDown(13, {
          shiftKey: true
        });
        type('abc');
        equal(jqconsole.$prompt_left.text().trim(), 'abc');
        keyDown(37);
        keyDown(37);
        keyDown(37);
        keyDown(37);
        return equal(jqconsole.$prompt_left.text().trim(), 'xyz');
      });
      it('moves to the next line when at the last char of the line moving right', function() {
        type('xyz');
        keyDown(13, {
          shiftKey: true
        });
        type('abc');
        equal(jqconsole.$prompt_left.text().trim(), 'abc');
        keyDown(37);
        keyDown(37);
        keyDown(37);
        keyDown(37);
        equal(jqconsole.$prompt_left.text().trim(), 'xyz');
        keyDown(39);
        return equal(jqconsole.$prompt_right.text().trim(), 'abc');
      });
      it('moves to the start of the word', function() {
        type('xyz abc');
        keyDown(37, {
          metaKey: true
        });
        equal(jqconsole.$prompt_right.text().trim(), 'abc');
        return equal(jqconsole.$prompt_left.text().trim(), 'xyz');
      });
      it('moves to the end of the word', function() {
        type('xyz abc');
        keyDown(37, {
          metaKey: true
        });
        keyDown(37, {
          metaKey: true
        });
        keyDown(39, {
          metaKey: true
        });
        equal(jqconsole.$prompt_right.text().trim(), 'abc');
        return equal(jqconsole.$prompt_left.text().trim(), 'xyz');
      });
      it('moves to the end of the word', function() {
        type('xyz abc');
        keyDown(37, {
          metaKey: true
        });
        keyDown(37, {
          metaKey: true
        });
        keyDown(39, {
          metaKey: true
        });
        equal(jqconsole.$prompt_right.text().trim(), 'abc');
        return equal(jqconsole.$prompt_left.text().trim(), 'xyz');
      });
      it('moves to the start of the line', function() {
        type('xyz abc');
        keyDown(36);
        return equal(jqconsole.$prompt_right.text().trim(), 'xyz abc');
      });
      it('moves to the end of the line', function() {
        type('xyz abc');
        keyDown(36);
        equal(jqconsole.$prompt_right.text().trim(), 'xyz abc');
        keyDown(35);
        equal(jqconsole.$prompt_right.text().trim(), '');
        return equal(jqconsole.$prompt_left.text().trim(), 'xyz abc');
      });
      it('moves to the start of the prompt', function() {
        type('xyz abc');
        keyDown(13, {
          shiftKey: true
        });
        type('hafm olim');
        keyDown(36, {
          metaKey: true
        });
        equal(jqconsole.$prompt_right.text().trim(), 'xyz abc');
        return equal(jqconsole.$prompt_after.text().trim(), 'prompt_continuehafm olim');
      });
      it('moves to the end of the prompt', function() {
        type('xyz abc');
        keyDown(13, {
          shiftKey: true
        });
        type('hafm olim');
        keyDown(36, {
          metaKey: true
        });
        equal(jqconsole.$prompt_right.text().trim(), 'xyz abc');
        equal(jqconsole.$prompt_after.text().trim(), 'prompt_continuehafm olim');
        keyDown(35, {
          metaKey: true
        });
        equal(jqconsole.$prompt_left.text().trim(), 'hafm olim');
        return equal(jqconsole.$prompt_before.text().trim(), 'prompt_labelxyz abc');
      });
      it('moves up one line', function() {
        type('xyz');
        keyDown(13, {
          shiftKey: true
        });
        type('a');
        keyDown(38, {
          shiftKey: true
        });
        return equal(jqconsole.$prompt_right.text().trim(), 'yz');
      });
      it('moves down one line', function() {
        type('xyz');
        keyDown(13, {
          shiftKey: true
        });
        type('a');
        keyDown(38, {
          metaKey: true
        });
        equal(jqconsole.$prompt_right.text().trim(), 'yz');
        keyDown(40, {
          metaKey: true
        });
        return equal(jqconsole.$prompt_right.text().trim(), '');
      });
      it('respects the column when moving vertically', function() {
        type('xyz');
        keyDown(13, {
          shiftKey: true
        });
        type('ab');
        keyDown(38, {
          shiftKey: true
        });
        equal(jqconsole.$prompt_right.text().trim(), 'z');
        keyDown(40, {
          shiftKey: true
        });
        keyDown(37);
        keyDown(37);
        equal(jqconsole.$prompt_right.text().trim(), 'ab');
        keyDown(38, {
          shiftKey: true
        });
        return equal(jqconsole.$prompt_right.text().trim(), 'xyz');
      });
      it('deletes a char', function() {
        type('xyz');
        keyDown(37);
        equal(jqconsole.$prompt_right.text().trim(), 'z');
        keyDown(46);
        return equal(jqconsole.$prompt_right.text().trim(), '');
      });
      return it('deletes a word', function() {
        type('xyz abc');
        keyDown(37);
        keyDown(37);
        keyDown(37);
        equal(jqconsole.$prompt_right.text().trim(), 'abc');
        keyDown(46, {
          metaKey: true
        });
        return equal(jqconsole.$prompt_right.text().trim(), '');
      });
    });
  });

}).call(this);
